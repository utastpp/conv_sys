/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rdr.gui;

import java.awt.MouseInfo;
import java.awt.Point;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import static javax.swing.JOptionPane.showMessageDialog;
import javax.swing.filechooser.FileNameExtensionFilter;
import rdr.apps.Main;
import rdr.cases.CaseLoader;
import rdr.domain.DomainLoader;
import rdr.inductrdr.InductRDR;
import cmcrdr.mysql.DBCreation;
import cmcrdr.mysql.DBOperation;

import cmcrdr.mysql.DBInductOperation;
import rdr.workbench.Workbench;

/**
 * This class is used to present GUI for domain editor
 * 
 * @author Hyunsuk (David) Chung (DavidChung89@gmail.com)
 */
public class DomainEditorFrame extends javax.swing.JFrame {

    private static String mode;
    private static boolean isOpened=false;    
    private boolean isSubmitted=false;    
    private String reasoner;  
    private String domainName;
    
    /**
     * Creates new form DomainEditorFrame
     */
    public DomainEditorFrame() {
        initComponents();
        setTitle(mode + " Domain ");
        updateFields(mode);        
    }

    private static void updateFields(String mode){
        
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        confirmImportDataset = new javax.swing.JDialog();
        jLabel3 = new javax.swing.JLabel();
        confirmDatasetYesButton = new javax.swing.JButton();
        confirmDatasetNoButton = new javax.swing.JButton();
        importFileChooser = new javax.swing.JFileChooser();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        domainNameField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        domainDescriptionTextArea = new javax.swing.JTextArea();
        submitButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        reasonerComboBox = new javax.swing.JComboBox();
        inductRDROnlyCheckBox = new javax.swing.JCheckBox();

        confirmImportDataset.setTitle("Import Dataset");
        confirmImportDataset.setMinimumSize(new java.awt.Dimension(255, 100));
        confirmImportDataset.setResizable(false);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Do you want to import dataset (.arff)?");

        confirmDatasetYesButton.setText("Yes");
        confirmDatasetYesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmDatasetYesButtonActionPerformed(evt);
            }
        });

        confirmDatasetNoButton.setText("No");
        confirmDatasetNoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmDatasetNoButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout confirmImportDatasetLayout = new javax.swing.GroupLayout(confirmImportDataset.getContentPane());
        confirmImportDataset.getContentPane().setLayout(confirmImportDatasetLayout);
        confirmImportDatasetLayout.setHorizontalGroup(
            confirmImportDatasetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, confirmImportDatasetLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(confirmImportDatasetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(confirmImportDatasetLayout.createSequentialGroup()
                        .addComponent(confirmDatasetYesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(confirmDatasetNoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        confirmImportDatasetLayout.setVerticalGroup(
            confirmImportDatasetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(confirmImportDatasetLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(confirmImportDatasetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(confirmDatasetYesButton)
                    .addComponent(confirmDatasetNoButton))
                .addContainerGap())
        );

        importFileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importFileChooserActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFocusTraversalPolicyProvider(true);
        setLocationByPlatform(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel1.setText("Domain Name");

        jLabel2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel2.setText("Domain Description");

        domainDescriptionTextArea.setColumns(20);
        domainDescriptionTextArea.setFont(new java.awt.Font("굴림", 0, 13)); // NOI18N
        domainDescriptionTextArea.setRows(5);
        jScrollPane1.setViewportView(domainDescriptionTextArea);

        submitButton.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        submitButton.setText("Submit");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        cancelButton.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel4.setText("Reasoner");

        reasonerComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SCRDR", "MCRDR" }));

        inductRDROnlyCheckBox.setText("InductRDR");
        inductRDROnlyCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inductRDROnlyCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(inductRDROnlyCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cancelButton)
                        .addGap(18, 18, 18)
                        .addComponent(submitButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(domainNameField)
                            .addComponent(reasonerComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(domainNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(reasonerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(submitButton)
                    .addComponent(cancelButton)
                    .addComponent(inductRDROnlyCheckBox))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        isOpened=false;
        if(!isSubmitted){
            StartupFrame.execute();
        }
    }//GEN-LAST:event_formWindowClosed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        //set location
        this.setLocation(200,180);
        
        isOpened=true;
    }//GEN-LAST:event_formWindowOpened

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        if(!domainNameField.getText().equals("")){
            //get domain name
            domainName = domainNameField.getText();
            //get domain description
            String domainDesc = domainDescriptionTextArea.getText();
            //get reasoner type
            int reasonerIndex = reasonerComboBox.getSelectedIndex();
            if(reasonerIndex == 0) {
                reasoner="SCRDR";
            } else if(reasonerIndex == 1) {
                reasoner="MCRDR";
            }
            // set domainName and methodType
            Main.domain.setDomainName(domainName);
            Main.domain.setReasonerType(reasoner);
            
            //
            
            //DPH 2016
            Main.workbench = new Workbench(reasoner);
            //Main.addWorkbench(reasoner); 
            
            isSubmitted = true;
            
            //there is two mode in this form: 1. add mode 2.edit mode
            switch (mode) {
                case "Add":
                    //initialise db                     
                    DBCreation.initialise(domainName,"");
                    
                    //if this is add mode, set confirm import dataset dialog visible
                    confirmImportDataset.setVisible(true);
                    confirmImportDataset.setLocation(350,300);
                    DomainLoader.inserDomainDetails(domainName, domainDesc, reasoner);
                    this.dispose();
                    break;
                case "Edit":
                    //if this is edit mode, 
                    // do something
                    break;
            }
        } else {
            showMessageDialog(null, "Domain Name is Required");
        }
    }//GEN-LAST:event_submitButtonActionPerformed

    private void confirmDatasetYesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmDatasetYesButtonActionPerformed
            //TO DO data file type
//            FileNameExtensionFilter filter = new FileNameExtensionFilter("rdr data file", new String[] {"arff", "data"});
            // set filter
            FileNameExtensionFilter filter = new FileNameExtensionFilter("arff", new String[] {"arff","ARFF"});
            
            importFileChooser.setCurrentDirectory(new File(System.getProperty("user.dir") + "/domain/cases/"));
            importFileChooser.addChoosableFileFilter(filter);
            importFileChooser.setFileFilter(filter);
            int returnVal = importFileChooser.showOpenDialog(this);
            if(returnVal == JFileChooser.APPROVE_OPTION) {
                File selectedFile = importFileChooser.getSelectedFile();                
                File dest =new File(System.getProperty("user.dir") + "/domain/cases/" + domainName + ".arff") {};
                Main.loadedFile = dest;
                try {
                    //copy file
                    Files.copy(selectedFile.toPath(), dest.toPath(),REPLACE_EXISTING);
                    
                    // dispose confirm dialog
                    confirmImportDataset.dispose();
                    
                    //if inductRDROnly
                    if(inductRDROnlyCheckBox.isSelected()){
                        CaseLoader.caseStructureImport();
                        
                        String fileName = System.getProperty("user.dir") + "/domain/cases/" + Main.domain.getDomainName() + ".arff";
                        DBInductOperation.init();
                        
                        int CaseAttrAmount = Main.domain.getCaseStructure().getAttrAmount();
                        InductRDR.createRules(fileName, CaseAttrAmount-1);
                        try {
                            DomainLoader.reloadDomainFile(Main.domain.getDomainName(),"");
                        } catch (Exception ex) {
                            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        
                        CaseLoader.caseImportWithCaseStructure();     
                        
                        InductRDR.getCornerstonCases();
                        
                        //execute main frame 
                        MainFrame.execute(true, domainName,reasoner);
                        
                    } else {
                        CaseLoader.caseImportWithCaseStructure();     

                        //insert case structure into db                    
                        CaseLoader.inserCaseStructure(Main.domain.getCaseStructure());
                        
                        //execute main frame 
                        MainFrame.execute(false, domainName,reasoner);
                    }
                    
                    //dispose domain Editor
                    this.dispose();
                    
                } catch (IOException ex) {
                    Logger.getLogger(StartupFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    Logger.getLogger(DomainEditorFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            }   
    }//GEN-LAST:event_confirmDatasetYesButtonActionPerformed

    private void confirmDatasetNoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmDatasetNoButtonActionPerformed
        confirmImportDataset.dispose();
        CaseStructureFrame.execute("new");
    }//GEN-LAST:event_confirmDatasetNoButtonActionPerformed

    private void importFileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importFileChooserActionPerformed

    }//GEN-LAST:event_importFileChooserActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void inductRDROnlyCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inductRDROnlyCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inductRDROnlyCheckBoxActionPerformed

    /**    
    * open GUI
    * @param mode
    **/
    public static void execute(String mode) {
        DomainEditorFrame.mode = mode;
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DomainEditorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DomainEditorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DomainEditorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DomainEditorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DomainEditorFrame().setVisible(true);
            }
        });
    }
    
    /**
     * returns true if the form is opened, otherwise returns false.
     * @return 
     */
    public static boolean isOpened(){
        return isOpened;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton confirmDatasetNoButton;
    private javax.swing.JButton confirmDatasetYesButton;
    private javax.swing.JDialog confirmImportDataset;
    private javax.swing.JTextArea domainDescriptionTextArea;
    private javax.swing.JTextField domainNameField;
    private javax.swing.JFileChooser importFileChooser;
    private javax.swing.JCheckBox inductRDROnlyCheckBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox reasonerComboBox;
    private javax.swing.JButton submitButton;
    // End of variables declaration//GEN-END:variables

}

